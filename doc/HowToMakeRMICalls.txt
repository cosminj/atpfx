package com.andrei;

import java.rmi.*;

public interface RInt extends Remote{

	String justPrintSomething() throws RemoteException;
	
}



package com.andrei;

import java.rmi.*;
import java.rmi.server.UnicastRemoteObject;

/* RMI Server
 * This class is supposed to be called from another 
 * JVM.
 * 
 * Don't forget to generate the stub by calling rmic
 * 
 * Start rmiregistry
 * From prompter run java -Djava.security.policy=server.policy
 * 
 * server.policy content:
 * grant {
 *     permission java.security.AllPermission;
 * };
 */
public class RSvr extends UnicastRemoteObject implements RInt{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public RSvr() throws RemoteException {
		//super();
		// TODO Auto-generated constructor stub
	}

	@Override
	public String justPrintSomething() throws RemoteException {
		return "The cowboy returned from the server";
		
	}
	
	public static void main(String[] args) throws Exception {
		System.setSecurityManager(new RMISecurityManager());
		RSvr r = new RSvr();
		Naming.bind("RSvr", r);
		System.out.println("Ready to serve");
	}

}





package com.andrei;

import java.rmi.Naming;
import java.rmi.RMISecurityManager;

public class RClient {

	public static void main(String[] args) throws Exception{
		System.setSecurityManager(new RMISecurityManager());
		RInt r = (RInt) Naming.lookup("RSvr");
		System.out.println("Message received from object on the other JVM = " + r.justPrintSomething());
	}
}
