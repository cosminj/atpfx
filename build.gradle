buildscript {
    ext {
        springBootVersion = '1.2.2.RELEASE'
        springSecurityOauth2Version = '2.0.6.RELEASE'
    }
    repositories {
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'net.saliman:gradle-cobertura-plugin:2.0.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    }
}

cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'cobertura'
apply plugin: 'com.github.kt3k.coveralls'

repositories {
    mavenCentral()
    maven { url 'https://repository.jboss.org/nexus/content/groups/public' }
    flatDir {
        dirs 'libs'
    }
}

jar {
    baseName = 'atpfx'
    version = '0.0.1-SNAPSHOT'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
    compile name: 'fxcm-api'
    compile name: 'fxmsg'

    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-ws"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"

    // not included in boot
    compile "org.springframework.security.oauth:spring-security-oauth2:${springSecurityOauth2Version}"

    compile("postgresql:postgresql:9.1-901.jdbc4")
    compile 'com.google.guava:guava:18.0'

    testCompile 'cglib:cglib-nodep:3.1'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.codehaus.groovy:groovy-all:2.2.0'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.3-SNAPSHOT'
    testCompile 'org.spockframework:spock-spring:1.0-groovy-2.3-SNAPSHOT'
    testCompile 'org.hsqldb:hsqldb:2.3.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.rootDir 
    rename {
        'atpfx.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('atpfx.jar').delete()
}

mainClassName = "com.atpfx.Atpfx"